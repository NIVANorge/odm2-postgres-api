apiVersion: v1
kind: Service
metadata:
  name: odm2-postgres-api
  annotations:
    cloud.google.com/load-balancer-type: "Internal"
  labels:
    app: odm2-postgres-api
spec:
  type: LoadBalancer
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
  selector:
    app: odm2-postgres-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: odm2-postgres-api
  labels:
    app: odm2-postgres-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: odm2-postgres-api
  template:
    metadata:
      annotations:
        prometheus.io/scrape_port: '5000'
        prometheus.io/scrape: 'true'
      labels:
        app: odm2-postgres-api
    spec:
      volumes:
        # To get access to the data upload bucket we use a token belonging to the data-upload component
        - name: niva-data-upload-token
          secret:
            secretName: niva-data-upload-token
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - odm2-postgres-api
                topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: cloud.google.com/gke-preemptible
                    operator: NotIn
                    values:
                      - 'true'
      containers:
        - name: odm2-postgres-api
          image: ODM2_API_IMAGENAME
          imagePullPolicy: Always
          volumeMounts:
            - name: niva-data-upload-token
              mountPath: /var/secrets/google
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/token.json
            - name: ODM2_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: odm2-db-owner-password
                  key: password
            - name: AQUAMONITOR_USER
              valueFrom:
                secretKeyRef:
                  name: aquamonitor-api-user
                  key: username
            - name: AQUAMONITOR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aquamonitor-api-user
                  key: password
          envFrom:
            - configMapRef:
                name: odm2-config-map
          ports:
            - containerPort: 5000
              name: tsb
            - containerPort: 8000
              name: metrics
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 15
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
      initContainers:
        - name: init-odm2
          image: ODM2_API_IMAGENAME
          imagePullPolicy: Always
          env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: odm2-postgres-password
                key: password
          - name: ODM2_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: odm2-db-owner-password
                key: password
          - name: ODM2_DB_READ_ONLY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: odm2-db-read-only-password
                key: password
          envFrom:
            - configMapRef:
                name: odm2-config-map
          command: ['python', 'src/odm2_postgres_api/db_init/db_initiate.py']
